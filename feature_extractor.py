"""
This file is responsible for taking in a csv file of 28x28 images of 
handwritten images (generated by the MNIST data set) represented by each
pixel's corrosponding 1-byte color. For each pattern, 8 features will be
extracted here (distance to the: top-left, top-middle, top-right, right-middle,
bottom-right, bottom-middle, bottom-left, left-middle), inspired by the 
IMOX feature selection

Author: Brenden Hein
"""
import csv
from deskew import deskew
import numpy as np


def left_middle(patt):
    """Finds the distance from the left-middle of the image to the first
    left middle pixel
    patt (list): the image pattern for a digit
    returns (int): the distance to the image
    """
    for c in range(28):
        if patt[27//2][c] == 1:
            return c
    return c


def bottom_middle(patt):
    """Finds the distance from the bottom-middle of the image to the first
    bottom middle pixel
    patt (list): the image pattern for a digit
    returns (int): the distance to the image
    """
    for r in range(27, -1, -1):
        if patt[r][27//2] == 1:
            return 27-r
    return 27-r


def right_middle(patt):
    """Finds the distance from the right-middle of the image to the first
    right middle pixel
    patt (list): the image pattern for a digit
    returns (int): the distance to the image
    """
    for c in range(27, -1, -1):
        if patt[27//2][c] == 1:
            return 27-c
    return 27-c


def top_middle(patt):
    """Finds the distance from the top-middle of the image to the first
    top middle pixel
    patt (list): the image pattern for a digit
    returns (int): the distance to the image
    """
    for r in range(28):
        if patt[r][27//2] == 1:
            return r  
    return r


def top_right(patt):
    """Finds the distance from the top-right corner of the image to the first
    top right pixel"""
    rc = 0
    while rc < len(patt) and patt[rc][27-rc] != 1:
        rc += 1
    return rc


def bottom_right(patt):
    """Finds the distance from the bottom-right corner of the image to the first
    bottom right pixel
    patt (list): the image pattern for a digit
    returns (int): the distance to the image
    """
    rc = 0
    while rc < len(patt) and patt[27-rc][27-rc] != 1:
        rc += 1
    return rc


def bottom_left(patt):
    """Finds the distance from the bottom-left corner of the image to the first
    bottom left pixel
    patt (list): the image pattern for a digit
    returns (int): the distance to the image
    """
    rc = 0
    while rc < len(patt) and patt[27-rc][rc] != 1:
        rc += 1
    return rc


def top_left(patt):
    """Finds the distance from the top-left corner of the image to the first
    top left pixel
    patt (list): the image pattern for a digit
    returns (int): the distance to the image
    """
    rc = 0
    while rc < len(patt) and patt[rc][rc] != 1:
        rc += 1
    return rc
    

def grid_pattern(patt):
    """Takes in a 1 dimensional list of 28X28 pixel colors and turns it into
    an array of a 28x28 matrix
    patt (list): the image pattern for a digit
    returns (list): the new 28x28 pattern
    """
    grid = []
    for r in range(28):
        grid.append([patt[r*28+c] for c in range(28)])
    return grid  


def main():
    filename = input("Enter a file to extract data from: ")
    filename_w = input("Enter a file to write to: ")
    fp = csv.reader(open(filename, "r"))
    fp_write = csv.writer(open(filename_w, "w", newline=""), delimiter=',')
    digits = {0: [], 1: [], 2: [], 3: [], 4: [], 
              5: [], 6: [], 7: [], 8: [], 9: []}
    
    # Loops through the lines of the datafile containing samples of the MNIST dataset
    for line in fp:
        patt = []
        for pix in line:
            if int(pix) > 0:
                patt.append(1)
            else:
                patt.append(0)
        patt = deskew(np.array(grid_pattern(patt[1:])))
      
        # Adds the features for a given datapoint
        features = []
        features.append(top_left(patt))
        features.append(top_middle(patt))
        features.append(top_right(patt))
        features.append(right_middle(patt))
        features.append(bottom_right(patt))
        features.append(bottom_middle(patt))
        features.append(bottom_left(patt))
        features.append(left_middle(patt))
        features.append(int(line[0]))
        digits[int(line[0])].append(features)
      
    # Writes all the data gathered to a file
    digits_list = [v for k, v in sorted(digits.items(), key=lambda s: s[0])]
    for digit in digits_list:
        for d in digit:
            fp_write.writerow(d)
        

if __name__ == "__main__":
    main()